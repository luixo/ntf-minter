import React from "react";
import { NextPage } from "next";
import Head from "next/head";
import Web3 from "web3";
import { useMutation } from "react-query";
import { useForm } from "react-hook-form";
import { Button, Card, Spinner } from "react-bootstrap";

import { styled } from "../src/styles";
import { CONTRACT_ADDRESS, ABI } from "../src/constants";
import { NFTMetadata, Credentials } from "../src/types";
import { controller } from "../src/hooks/use-metamask";
import { usePinata } from "../src/hooks/use-pinata";

import { Footer } from "../src/components/footer";
import { MetamaskOverlay } from "../src/components/metamask-overlay";
import { MintForm } from "../src/components/mint-form";
import { TransactionCard } from "../src/components/transaction-card";
import { ErrorToast } from "../src/components/error-toast";
import { StatusSpinner } from "../src/components/status-spinner";

const Wrapper = styled("div", {
  padding: "32px 2rem",
  maxWidth: 600,
  margin: "0 auto",
  position: "relative",
});

const Main = styled("main", {
  position: "relative",
});

const Block = styled("div", {
  "&:not(:empty)": {
    marginTop: "1rem",
  },
});

const web3 = new Web3();

const Home: NextPage = () => {
  const form = useForm<NFTMetadata>({
    mode: "onChange",
  });
  const [credentials, setCredentials] = React.useState<
    Credentials | undefined
  >();
  const { pinMetadata } = usePinata();
  const [lastStatus, setLastStatus] = React.useState<string>();

  const mintMutation = useMutation<
    string,
    unknown,
    { data: NFTMetadata; credentials: Credentials }
  >(async ({ data, credentials }) => {
    if (!controller) {
      throw new Error("window.ethereum does not exist");
    }
    setLastStatus("Pinning metadata to IPFS");
    const ipfsUrl = await pinMetadata(data);
    setLastStatus("Creating a contract reference");
    const contract = await new web3.eth.Contract(ABI, CONTRACT_ADDRESS);
    setLastStatus("Signing a transaction in Metamask");
    return controller.request({
      method: "eth_sendTransaction",
      params: [
        {
          to: CONTRACT_ADDRESS,
          from: credentials.address,
          data: contract.methods
            .mintNFT(credentials.address, ipfsUrl)
            .encodeABI(),
        },
      ],
    });
  });

  const reset = React.useCallback(() => {
    mintMutation.reset();
    form.reset();
  }, [mintMutation, form]);

  return (
    <>
      <Wrapper>
        <Head>
          <title>NFT Minter</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <Main>
          <MetamaskOverlay onCredentialsChange={setCredentials} />
          <MintForm
            form={form}
            credentials={credentials}
            onSubmit={mintMutation.mutate}
            disabled={mintMutation.isLoading || mintMutation.isSuccess}
          />
          <Block>
            <StatusSpinner
              isLoading={mintMutation.isLoading}
              status={lastStatus}
            />
          </Block>
          {credentials && mintMutation.data ? (
            <>
              <Block>
                <TransactionCard
                  hash={mintMutation.data}
                  network={credentials.network}
                />
              </Block>
              <Block>
                <Button onClick={reset}>Mint another NFT</Button>
              </Block>
            </>
          ) : null}
        </Main>

        <Footer />
      </Wrapper>

      <ErrorToast mutation={mintMutation} />
    </>
  );
};

export default Home;
