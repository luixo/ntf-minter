import React from "react";
import { NextPage } from "next";
import Head from "next/head";
import Web3 from "web3";
import { useMutation } from "react-query";

import { styled } from "../src/styles";
import { CONTRACT_ADDRESS, ABI } from "../src/constants";
import { NFTMetadata } from "../src/types";
import { controller } from "../src/hooks/use-metamask";
import { usePinata } from "../src/hooks/use-pinata";

import { Footer } from "../src/components/footer";
import {
  Credentials,
  MetamaskOverlay,
} from "../src/components/metamask-overlay";
import { MintForm } from "../src/components/mint-form";
import { TransactionCard } from "../src/components/transaction-card";
import { useForm } from "react-hook-form";
import { Button } from "react-bootstrap";

const Wrapper = styled("div", {
  padding: "32px 2rem",
  maxWidth: 600,
  margin: "0 auto",
  position: "relative",
});

const Main = styled("main", {
  position: "relative",
});

const web3 = new Web3();

const Home: NextPage = () => {
  const form = useForm<NFTMetadata>({
    mode: "onChange",
  });
  const [credentials, setCredentials] = React.useState<
    Credentials | undefined
  >();
  const { pinMetadata } = usePinata();

  const mintMutation = useMutation<
    string,
    unknown,
    { data: NFTMetadata; credentials: Credentials }
  >(async ({ data, credentials }) => {
    if (!controller) {
      throw new Error("window.ethereum does not exist");
    }
    const ipfsUrl = await pinMetadata(data);
    const contract = await new web3.eth.Contract(ABI, CONTRACT_ADDRESS);
    return controller.request({
      method: "eth_sendTransaction",
      params: [
        {
          to: CONTRACT_ADDRESS,
          from: credentials.address,
          data: contract.methods
            .mintNFT(credentials.address, ipfsUrl)
            .encodeABI(),
        },
      ],
    });
  });

  const reset = React.useCallback(() => {
    mintMutation.reset();
    form.reset();
  }, [mintMutation, form]);

  return (
    <Wrapper>
      <Head>
        <title>NFT Minter</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Main>
        <MetamaskOverlay onCredentialsChange={setCredentials} />
        <MintForm
          form={form}
          credentials={credentials}
          onSubmit={mintMutation.mutate}
          disabled={mintMutation.isLoading || mintMutation.isSuccess}
        />
        {credentials && mintMutation.data ? (
          <div className="mt-2">
            <TransactionCard
              hash={mintMutation.data}
              network={credentials.network}
            />
            <Button className="mt-2" onClick={reset}>
              Mint another NFT
            </Button>
          </div>
        ) : null}
      </Main>

      <Footer />
    </Wrapper>
  );
};

export default Home;
